plugins {
    id 'org.springframework.boot' version '2.0.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
compileJava.options.encoding = 'UTF-8'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.projectName = "$name"

repositories {
    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation('org.springframework.boot:spring-boot-starter-cache')

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '3.4.2'

    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation 'io.jsonwebtoken:jjwt:0.7.0'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    implementation group: 'org.apache.commons', name: 'com.springsource.org.apache.commons.httpclient', version: '3.1.0'
    implementation group: 'com.alibaba', name: 'fastjson', version: '1.2.58'

    implementation('org.springframework.security:spring-security-test')

    annotationProcessor 'org.projectlombok:lombok:1.18.2'
    compileOnly 'org.projectlombok:lombok:1.18.2'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.2'
    testCompileOnly 'org.projectlombok:lombok:1.18.2'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    compile(
            fileTree(dir: '../../1024//cloud-engine/cloud-engine-frame/build/libs', include: 'cloud-engine-frame.jar')
    )
    compile(
            fileTree(dir: 'libs', include: ['*.jar'])
    )
}

test {
    useJUnitPlatform()
}
sourceSets.main.java.srcDirs = ['src/main/java']
sourceSets.main.resources.srcDirs = ['src/main/resources']

//清除上次的编译过的文件
task clearPj(type: Delete) { delete 'build' }

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }

jar {
    exclude '*.properties'
    exclude '*.groovy'
    exclude '*.txt'
    exclude '*.ipdb'
    String someString = ''
    configurations.runtime.each { someString = someString + " . lib//" + it.name }
    manifest {
        attributes 'Main-Class': 'com.cloud.channel.backend.app.ChannelBackendApp'
        attributes 'Class-Path': someString
    }

}

task copyJar(type: Copy) {
    from configurations.runtime
    into('build/libs/lib')
}

//把JAR复制到目标目录
task release(type: Copy, dependsOn: [jar, copyJar]) {
    from 'src/main/resources'
    into('build/libs/') // 目标位置
}
