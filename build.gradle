plugins {
    id 'org.springframework.boot' version '2.0.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
compileJava.options.encoding = 'UTF-8'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.projectName = "$name"

repositories {
    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    jcenter()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation('org.springframework.boot:spring-boot-starter-cache')

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '3.4.2'

    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation 'io.jsonwebtoken:jjwt:0.7.0'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    implementation group: 'org.apache.commons', name: 'com.springsource.org.apache.commons.httpclient', version: '3.1.0'
    implementation group: 'com.alibaba', name: 'fastjson', version: '1.2.58'

    implementation('org.springframework.security:spring-security-test')

    annotationProcessor 'org.projectlombok:lombok:1.18.2'
    compileOnly 'org.projectlombok:lombok:1.18.2'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.2'
    testCompileOnly 'org.projectlombok:lombok:1.18.2'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    compile(
            fileTree(dir: '../../1024//cloud-engine/cloud-engine-frame/build/libs', include: 'cloud-engine-frame.jar')
    )
    compile(
            fileTree(dir: 'libs', include: ['*.jar'])
    )
}

test {
    useJUnitPlatform()
}
sourceSets.main.java.srcDirs = ['src/main/java']
sourceSets.main.resources.srcDirs = ['src/main/resources']

// 清除现有的lib目录
task clearJar(type: Delete) {
    delete "$buildDir\\libs\\lib"
}

// 将依赖包复制到lib目录
task copyJar(type: Copy, dependsOn: 'clearJar') {
    from configurations.compileClasspath
    into "$buildDir\\libs\\lib"
}
task copyJar2(type:Copy){
    from configurations.runtime
    into ('build/libs/lib')
}
bootJar {
    // 例外所有的jar
    excludes = ["*.jar"]
    exclude '*.properties'
    exclude '*.groovy'
    exclude '*.yml'
    exclude '*.xml'
    // lib目录的清除和复制任务
    dependsOn clearJar
    dependsOn copyJar

    // 指定依赖包的路径
    manifest {
        attributes "Manifest-Version": 1.0,
                'Class-Path': configurations.compileClasspath.files.collect { "lib/$it.name" }.join(' ')
    }
}
